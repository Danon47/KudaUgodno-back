# Generated by Django 5.2.5 on 2025-09-01 18:36

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('calendars', '0001_initial'),
        ('hotels', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='RoomRules',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Правила в номере', max_length=100, null=True, verbose_name='Правила в номере')),
                ('option', models.BooleanField(default=False, help_text='Да/Нет', verbose_name='Да/Нет')),
            ],
            options={
                'verbose_name': 'Правило в номере',
                'verbose_name_plural': 'Правила в номерах',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(blank=True, choices=[('Standard', 'Standard'), ('Single Room', 'Single Room'), ('Double Room', 'Double Room'), ('Twin Room', 'Twin Room'), ('Triple Room', 'Triple Room'), ('Family Room', 'Family Room'), ('Superior Room', 'Superior Room'), ('Deluxe Room', 'Deluxe Room'), ('Studio', 'Studio'), ('Suite', 'Suite'), ('Junior Suite', 'Junior Suite'), ('Residence', 'Residence'), ('Royal Suite', 'Royal Suite'), ('Penthouse', 'Penthouse')], help_text='Категория номера', max_length=100, null=True, verbose_name='Категория номера')),
                ('number_of_adults', models.IntegerField(blank=True, help_text='Количество проживающих взрослых', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Количество проживающих взрослых')),
                ('number_of_children', models.IntegerField(blank=True, help_text='Количество проживающих детей', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Количество проживающих детей')),
                ('double_bed', models.IntegerField(blank=True, help_text='Двуспальная кровать', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)], verbose_name='Двуспальная кровать')),
                ('single_bed', models.IntegerField(blank=True, help_text='Односпальная кровать', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='Односпальная кровать')),
                ('area', models.IntegerField(help_text='Площадь номера', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)], verbose_name='Площадь номера')),
                ('quantity_rooms', models.IntegerField(default=0, help_text='Количество номеров данного типа', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(500)], verbose_name='Количество номеров данного типа')),
                ('amenities_common', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, help_text='Общие удобства в номере, введите через запятую', null=True, size=None, verbose_name='Общие удобства в номере')),
                ('amenities_coffee', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, help_text='Удобства кофе станции в номере, введите через запятую', null=True, size=None, verbose_name='Удобства кофе станции в номере')),
                ('amenities_bathroom', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, help_text='Удобства ванной комнаты в номере, введите через запятую', null=True, size=None, verbose_name='Удобства ванной комнаты в номере')),
                ('amenities_view', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, help_text='Удобства вид в номере, введите через запятую', null=True, size=None, verbose_name='Удобства вид в номере')),
                ('calendar_dates', models.ManyToManyField(blank=True, help_text='Календарь бронирования', related_name='rooms_dates', through='calendars.CalendarPrice', to='calendars.calendardate', verbose_name='Календарь бронирования')),
                ('hotel', models.ForeignKey(blank=True, help_text='Отель', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rooms', to='hotels.hotel', verbose_name='Отель')),
                ('type_of_meals', models.ManyToManyField(help_text='Тип питания', related_name='rooms', to='hotels.typeofmeal', verbose_name='Тип питания')),
                ('rules', models.ManyToManyField(help_text='Введите название правила, а потом выберите его возможность использования Да/Нет', related_name='rooms', to='rooms.roomrules', verbose_name='Название правила')),
            ],
            options={
                'verbose_name': 'Номер',
                'verbose_name_plural': 'Номера',
                'ordering': ('hotel',),
            },
        ),
        migrations.CreateModel(
            name='RoomPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(blank=True, help_text='Фотография номера', upload_to='hotels/hotels/rooms/', verbose_name='Фотография номера')),
                ('room', models.ForeignKey(blank=True, help_text='Номер', on_delete=django.db.models.deletion.CASCADE, related_name='room_photos', to='rooms.room', verbose_name='Номер')),
            ],
            options={
                'verbose_name': 'Фотография номера',
                'verbose_name_plural': 'Фотографии номера',
            },
        ),
        migrations.AddIndex(
            model_name='room',
            index=models.Index(fields=['hotel', 'number_of_adults', 'number_of_children'], name='idx_rooms_hotel_guests'),
        ),
    ]
